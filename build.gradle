import static java.nio.file.Files.copy;
import static java.nio.file.StandardCopyOption.REPLACE_EXISTING;
import static java.nio.file.Paths.get;

apply plugin: 'java'
apply plugin: 'application'

// i complicated this app too much, so skipping unit testing

repositories {
    jcenter()
}
dependencies {
   compile files(
      'myutils.jar',
      /C:\Users\Sameer\Documents\MEGA\eclipse_workplace\imports\jaunt\jaunt.jar/,
      /C:\Users\Sameer\Documents\MEGA\eclipse_workplace\imports\quick-json-1.0.2.3.jar/
    )
    compile group: 'org.slf4j', name: 'slf4j-jdk14', version: '1.8.0-beta1'
   compile group: 'org.jsoup', name: 'jsoup', version: '1.10.3'
   testCompile 'junit:junit:4.12'
}

task loggingCopy {
 doLast {
    copy(file('logging.properties').toPath(), file('compiled/logging.properties').toPath(), REPLACE_EXISTING)
 }
}

run {
  main 'MainTest'
}
 
version = 1.02
sourceCompatibility = JavaVersion.VERSION_1_8 
targetCompatibility = JavaVersion.VERSION_1_8
 
mainClassName = 'Main'
installDist.destinationDir file("$rootDir/compiled/app")
installDist.dependsOn << loggingCopy


task copyJaunt(type: Copy){
  from file(/C:\Users\Sameer\Documents\MEGA\eclipse_workplace\imports\jaunt\jaunt.jar/)
  into file("${installDist.destinationDir}/lib")
}

run.workingDir file('compiled')

jar {
  manifest {
        attributes('Manifest-Version': '1.0',
                   'Implementation-Version': version,
                   'Main-Class':"$mainClassName",	
                   'Class-Path':'.'
                   )
    }
}